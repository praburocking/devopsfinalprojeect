image: python:latest

stages:
  - build
  - test
  - deploy



build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete." 

test-job:
  stage: test
  image: python:latest
  before_script:
    - pip install pytest
  dependencies: 
    - build-job  
  script:
    - echo "Running tests"
    - pytest tests/
    - echo "test completed"
    


deploy_staging:
  image: ubuntu:lastest
  stage: deploy
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan gitlab-ce >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ##
    ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
    ## previously, uncomment the following two lines instead.
    ##
    #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts
    #- chmod 644 ~/.ssh/known_hosts

    ##
    ## You can optionally disable host key checking. Be aware that by adding that
    ## you are suspectible to man-in-the-middle attacks.
    ## WARNING: Use this only with the Docker executor, if you use it with shell
    ## you will overwrite your user's SSH config.
    ##
    #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    ##
    #- git config --global user.email "darth@empire.com"
    - git config --global user.name "prabu"
    - git config --global user.password "$GIT_PASSWORD"

  script:
    - echo "ssh deploy started"
    # - ssh prabu@localhost "cd var/www/ && git checkout project && git pull origin project && exit"
    - git clone http://gitlab-ce/gitlab-instance-492260da/finalproject.git
    - git checkout -B project
    - echo "ssh deploy completed"
  only:
    - project

